object SyntaxManager: TSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$\w+::\w+ |'#13#10'[\$\#%@]+\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex subst'
        StyleName = 'String regex'
        TokenType = 4
        Expression = 's/ (\\/|.)*? / (\\/|.)*? / \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '\w* / (\\/|.)+? (/|$) \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\\\|\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?!@&%\|~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 1028
          end>
        BlockEnd = '}'
        NameFmt = 'sub %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'sub %s-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      ''
      '$re = m/text/i; #Usual regex'
      '$sLine =~ s/x/y/; #Subst regex'
      '$sLine =~ s/x\/y/y\*z/g; #Subst too'
      ''
      '$MyVar or $MyLib::MyVar '
      'or @MyArray or $#MyArray or %MyHash'
      ''
      'sub MyOpen(*$) {  # debug'
      '  my ($sKey);'
      '}  '
      ''
      'sub WriteBack() {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}'
      ''
      'sub Some {'
      '  print "Test";'
      '  while (test) {'
      '    print "TT";'
      '  }  '
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'String 2')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'pl pm cgi pod plx'
    LexerName = 'Perl'
    Notes.Strings = (
      'Fixes by Alex, uvviewsoft.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal84: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Code block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15856098
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Code border'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clGray
      end
      item
        DisplayName = 'HTML'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
        Font.Style = []
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Exec'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSkyBlue
      end>
    TokenRules = <
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(["'#39'])(\\\\|\\\1|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)<<<(\w+)\z.+?\z\1;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[0-9a-f]+ |'#13#10'0b[01]+ |'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Exec'
        StyleName = 'Exec'
        TokenType = 4
        Expression = '`.+?`'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'as'
              'break'
              'case'
              'class'
              'const'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'include_once'
              'int'
              'isset'
              'old_function'
              'print'
              'private'
              'protected'
              'public'
              'pval'
              'require'
              'require_once'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'use'
              'var'
              'void'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'Begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class_end'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function'
        BlockName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function_end'
        EndOfTextClose = True
        NameFmt = '%s0~[(]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function_end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function_without_class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function_without_class_end'
        NameFmt = '%s0~[(]1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function_without_class_end'
        BlockName = 'function_without_class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'#13#10
        EndExpression = '<\?'#13#10
        SyntAnalyzer = SyntAnal36
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<?php'
      ''
      'function ppp(int a){'
      '  $a = 10 + 12.2;'
      '  echo $a; '
      '  echo '#39'test'#39'."\\";'
      '  if (a){'
      '  }'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp(int a; int b){'
      '  i++;'
      '  if (a){'
      '  }'
      '}'
      ''
      '?>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End')
    LexerName = 'PHP'
    Notes.Strings = (
      'Original: EControl'
      'Tree added by Matthias030 (SynWrite admin)'
      'Changes by Alexey (SynWrite)')
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal23: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Control'#39's ID'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+L*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Resource'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.\{\}]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key Words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'BEGIN'
              'BITMAP'
              'CURSOR'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'END'
              'ICON'
              'LANGUAGE'
              'MENU'
              'REGISTRY'
              'STRINGTABLE'
              'TEXTINCLUDE'
              'TOOLBAR'
              'TYPELIB'
              'VERSIONINFO')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Menu & Toolbar controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BUTTON'
              'MENUITEM'
              'POPUP'
              'SEPARATOR')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dialog controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'AUTOCHECKBOX'
              'CAPTION'
              'COMBOBOX'
              'CONTROL'
              'CTEXT'
              'DEFPUSHBUTTON'
              'EDITTEXT'
              'FONT'
              'GROUPBOX'
              'ICON'
              'LISTBOX'
              'LTEXT'
              'PUSHBUTTON'
              'RADIOBUTTON'
              'RTEXT'
              'STYLE')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BEGIN'
        ConditionList = <
          item
            TagList.Strings = (
              'BEGIN')
            TokenTypes = 4
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'String table'
        ConditionList = <
          item
            TagList.Strings = (
              'STRINGTABLE')
            TokenTypes = 4
          end>
        BlockEnd = 'String table end'
        NameFmt = '%e2 ...'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'String table end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Resource'
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'MENU'
              'TEXTINCLUDE'
              'TOOLBAR'
              'VERSIONINFO')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Resource end'
        NameFmt = '%s1'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Resource end'
        BlockName = 'Resource'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '\#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#endif')
            CondType = tcMask
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BITMAP begin'
        BlockName = 'Resource'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'BITMAP end'
        NameFmt = '%s1  ::  %s-1'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BITMAP end'
        BlockName = 'Resource'
        NotParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = -1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... %ez0'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    Extentions = 'rc rc2'
    LexerName = 'Resource script'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Blob Data'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Blob data'
        StyleName = 'Blob Data'
        BlockName = 'Blob begin'
        Expression = '[^\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w\.]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\{\}\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'end'
              'inherited'
              'inline'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'inherited'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1%s-2 %s-3'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '%s0 %s-1%s-2 %s-3'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection begin'
        ConditionList = <
          item
            TagList.Strings = (
              '<')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'Collection end'
        NameFmt = '%s2 (collection)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '< %s2 >'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'List end'
        NameFmt = '%s2 (list)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '( %s2 )'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob begin'
        StyleName = 'Blob Data'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Blob end'
        HighlightPos = cpBound
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{ Delphi/C++ Builder Form Definitions }'
      'object TestForm: TTestForm'
      '  Left = 200'
      '  Top = 100'
      '  Caption = '#39'Sample source'#39
      '  SampleText.Strings = ('
      '    '#39'Test'#39')'
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Extentions = 'dfm lfm lxl lcf fmx xfm'
    LexerName = 'Delphi resources'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal21: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blDot
        BorderColorBottom = clRed
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        TokenType = 4
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'operator'
        StyleName = 'operator'
        TokenType = 2
        Expression = '!\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbols'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\|&\$=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'variable'
        TokenType = 5
        Expression = '^\s*?\w*\s*?='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block start'
        ConditionList = <
          item
            TagList.Strings = (
              '!IF'
              '!IFDEF'
              '!IFNDEF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Block end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '!ENDIF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Variable'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    Extentions = 
      '/makefile /makefile.gnu /makefile.gcc /makefile.bor /makefile.ms' +
      'c /makefile.vc /makefile.dm /makefile.bcc'
    LexerName = 'Make files'
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'constant'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^;.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 9
        Expression = '^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        Enabled = False
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Pre {#..}'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '\{\#.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Constant'
        StyleName = 'constant'
        TokenType = 8
        Expression = '\{.*?\}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '^\s*\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String with {var}'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '"       [\w\\\.\-\+\#\:\*\x20/\(\)<>]*? " |'#13#10'"       [\w\\\.\-\+' +
          '\#\:\*\x20/\(\)<>]*? (?=\{) |'#13#10'(?<=\}) [\w\\\.\-\+\#\:\*\x20/\(\' +
          ')<>]*? "'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keys'
        StyleName = 'Reserved word'
        NotParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'adminprivilegesrequired'
              'allowcancelduringinstall'
              'allownoicons'
              'allowrootdirectory'
              'allowuncpath'
              'alwayscreateuninstallicon'
              'alwaysrestart'
              'alwaysshowcomponentslist'
              'alwaysshowdironreadypage'
              'alwaysshowgrouponreadypage'
              'alwaysusepersonalgroup'
              'appcomments'
              'appcontact'
              'appcopyright'
              'appenddefaultdirname'
              'appenddefaultgroupname'
              'appid'
              'appmodifypath'
              'appmutex'
              'appname'
              'apppublisher'
              'apppublisherurl'
              'appreadmefile'
              'appsupporturl'
              'appupdatesurl'
              'appvername'
              'appversion'
              'attribs'
              'backcolor'
              'backcolor2'
              'backcolordirection'
              'backsolid'
              'changesassociations'
              'changesenvironment'
              'components'
              'compression'
              'createappdir'
              'createuninstallregkey'
              'defaultdirname'
              'defaultgroupname'
              'defaultuserinfoname'
              'defaultuserinfoorg'
              'defaultuserinfoserial'
              'description'
              'destdir'
              'destname'
              'direxistswarning'
              'disableappenddir'
              'disabledirpage'
              'disablefinishedpage'
              'disableprogramgrouppage'
              'disablereadymemo'
              'disablereadypage'
              'disablestartupprompt'
              'dontmergeduplicatefiles'
              'enabledirdoesntexistwarning'
              'excludes'
              'extradiskspacerequired'
              'filename'
              'flags'
              'flatcomponentslist'
              'groupdescription'
              'infoafterfile'
              'infobeforefile'
              'key'
              'languagedetectionmethod'
              'languages'
              'licensefile'
              'messagesfile'
              'minversion'
              'name'
              'onlybelowversion'
              'OutputBaseFilename'
              'outputdir'
              'password'
              'permissions'
              'privilegesrequired'
              'restartifneededbyrun'
              'root'
              'section'
              'setupiconfile'
              'showcomponentsizes'
              'showlanguagedialog'
              'showtaskstreelines'
              'solidcompression'
              'source'
              'string'
              'subkey'
              'tasks'
              'timestamprounding'
              'timestampsinutc'
              'touchdate'
              'touchtime'
              'type'
              'types'
              'uninstallable'
              'uninstalldisplayicon'
              'uninstalldisplayname'
              'uninstallfilesdir'
              'uninstalliconfile'
              'uninstalliconname'
              'uninstalllogmode'
              'uninstallrestartcomputer'
              'uninstallstyle'
              'updateuninstalllogappname'
              'usepreviousappdir'
              'usepreviousgroup'
              'useprevioussetuptype'
              'useprevioustasks'
              'useprevioususerinfo'
              'userinfopage'
              'valuedata'
              'valuename'
              'valuetype'
              'windowresizable'
              'windowshowcaption'
              'windowstartmaximized'
              'windowvisible'
              'wizardimagebackcolor'
              'wizardimagefile'
              'wizardimagestretch'
              'wizardsmallimagebackcolor'
              'wizardsmallimagefile'
              'wizardstyle')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Section end'
        EndOfTextClose = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Code'
        StartExpression = '(?i)\[code\]'#13#10
        EndExpression = '^\[\w+\]'
        SyntAnalyzer = SyntAnal20
        ToTextEnd = True
      end>
    SampleText.Strings = (
      '[Languages]'
      'Name: "english"; MessagesFile: "compiler:Default.isl"'
      'Name: "german"; MessagesFile: "compiler:Languages\German.isl"'
      ''
      '[Tasks]'
      
        'Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; Grou' +
        'pDescription: "{cm:AdditionalIcons}"'
      ';test'
      '[Files]'
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C#.acp"; DestDir: "{app}\' +
        'Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartrep' +
        'lace overwritereadonly uninsrestartdelete ignoreversion uninsrem' +
        'overeadonly '
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C++.acp"; DestDir: "{app}' +
        '\Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartre' +
        'place overwritereadonly uninsrestartdelete ignoreversion uninsre' +
        'movereadonly '
      ''
      '#sub AddIconFiles'
      '#expr GetFileVars'
      
        'Source: {#Copy (IconsMask, 0, RPos ("\", IconsMask)) + CurrentFi' +
        'leName}; DestDir: {app}; DestName: {#IconName}; Components: icon' +
        's\{#CurrentName}; Flags: ignoreversion'
      '#endsub '
      ''
      '[Code]'
      '  #ifdef Code'
      'function TT(a: Integer): Integer;'
      'begin'
      '  Result:= Ord('#39'Test'#39'[a]);'
      'end;'
      '  #endif'
      ''
      '[CustomMessages]'
      'ru.Msg=Ru'
      'ru.M2=Ru')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Constant'
      'Section'
      'Preprocessor')
    Extentions = 'iss'
    LexerName = 'Inno Setup'
    SkipSpaces = False
    Notes.Strings = (
      'Improved by Alex, uvviewsoft.com')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal57: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Identifier Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13266272
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Expression'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 33023
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        BorderTypeLeft = blSolid
        BorderTypeTop = blSolid
        BorderTypeRight = blSolid
        BorderTypeBottom = blSolid
      end
      item
        DisplayName = 'Test Style Main'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Test Style Sub'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clLime
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Marked Block - Range'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15925237
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree (Main, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1482313
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Regular, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1550414
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
        BorderTypeLeft = blSolid2
        BorderColorLeft = 4364526
      end
      item
        DisplayName = 'Alias'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 2086500
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Table'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 5
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 5
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 3'
        StyleName = 'String'
        TokenType = 5
        Expression = '`.*?(`|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment Ext'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol 2'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '!=|<>|\^=|<>|<=|>=|\(\+\)|\(\-\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '[/,\.;:\(\)=<>\+\-\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier'
        StyleName = 'Identifier'
        TokenType = 3
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Ext'
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)\[[\w\x20]*\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified'
        Enabled = False
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*(\.[a-z_]\w*){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Sub'
        Enabled = False
        StyleName = 'Test Style Sub'
        TokenType = 9
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Main'
        Enabled = False
        StyleName = 'Test Style Main'
        StrictParent = True
        TokenType = 8
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified Ext'
        Enabled = False
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)(\[[\w\x20]*\]|[a-z_]\c*)*(\.(\[[\w\x20]*\]|[a-z_]\c*)){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyword'
        StyleName = 'Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'all'
              'and'
              'any'
              'as'
              'between'
              'by'
              'concat'
              'distinct'
              'exists'
              'from'
              'full'
              'grant'
              'group'
              'having'
              'in'
              'index'
              'inner'
              'is'
              'join'
              'left'
              'like'
              'max'
              'min'
              'not'
              'null'
              'on'
              'option'
              'or'
              'order'
              'outer'
              'select'
              'some'
              'table'
              'union'
              'view'
              'where')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Expression'
        StyleName = 'Expression'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'case'
              'else'
              'end'
              'then'
              'when')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'avg'
              'bitand'
              'count'
              'date_format'
              'decode'
              'substr'
              'timediff'
              'userenv')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function Ex'
        StyleName = 'Function Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bitand'
              'decode'
              'userenv')
            TokenTypes = 8192
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Symbol Ext'
        StyleName = 'Symbol Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '(-)'
              '(+)')
            TokenTypes = 16
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Bracket Open'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Close'
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = 'subquery'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end SELECT'
        BlockName = 'section SELECT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section SELECT'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end WHERE'
        BlockName = 'section WHERE'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section WHERE'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table'
        StyleName = 'Table'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = '('
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        IgnoreAsParent = True
      end
      item
        DisplayName = 'section end FROM'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section FROM'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION END'
        BlockName = 'SECTION'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end
          item
            TokenTypes = 4095
          end>
        BlockOffset = 1
        BlockEnd = 'SECTION'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT END'
        BlockName = 'STATEMENT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Open'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'sub-section end ON'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from'
              'group'
              'having'
              'order'
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        DynSelectMin = True
        TreeItemStyle = 'Tree (Regular, Color)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT'
        StyleName = 'Marked Block - Range'
        ConditionList = <
          item
            TagList.Strings = (
              'select'
              'union')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'STATEMENT END'
        EndOfTextClose = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        TreeItemStyle = 'Tree (Main, Black)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section SELECT'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__SELECT__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section FROM'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__FROM__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'syb-section ON'
        BlockName = 'section FROM'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'on')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'sub-section end ON'
        DisplayInTree = False
        NameFmt = '__ON__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section WHERE'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__WHERE__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table or Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      
        'SELECT c.session , c.username ,TIMEDIFF(max(c.datetime) , min(c.' +
        'datetime))'
      
        'FROM  livehelp_domain_user a , livehelp_users b, livehelp_messag' +
        'es c'
      'WHERE a.id_domain = 29 AND'
      '      a.id_user = b.id AND'
      '      CONCAT( b.firstname, '#39' '#39',b.lastname)   = c.username AND'
      '      DATE_FORMAT(c.datetime,'#39'%m/%d/%Y'#39') ='#39'09/21/2006'#39' AND'
      '      (SELECT COUNT(data) from sometable where Fld = '#39'YES'#39') = 6 '
      'GROUP BY c.session'
      'ORDER BY c.session,c.username'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'KeyWord'
      'Identifier'
      'Symbol'
      'String'
      'Integer'
      'Float'
      'Table'
      'Field')
    Gramma.Gramma = 'Skip = <Comment>;'#13#10
    CurrentLineStyle = 'Current Line'
    Extentions = 'sql'
    LexerName = 'SQL'
    SkipSpaces = False
    RestartFromLineStart = True
    LineComment = '--'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
end
